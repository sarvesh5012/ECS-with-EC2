name: Terraform AWS Deployment

on:
  # Trigger the workflow on push to the main branch or pull request
  push:
    branches:
      - sarvesh_finalinputs
  pull_request:
    branches:
      - sarvesh_finalinputs

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6  # Use the required Terraform version

      # Step 3: Configure AWS credentials from GitHub Secrets
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  # Replace with your AWS region

      # Step 4: Remove specific Terraform files to ignore them
      # - name: Remove Ignored Files
      #   run: |
      #     rm -f module/autoscaling_group.tf
      #     rm -f module/capacity_providers.tf
      #     rm -f module/launch_template.tf
      #     rm -f module/ecs_service.tf
      #     rm -f module/ecs_task_definition.tf
      #     rm -f module/user_data.sh
      #     rm -f module/target_group_instance.tf

      # Step 5: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 6: Plan Terraform changes
      - name: Terraform Plan
        run: terraform plan

      # Step 7: Apply Terraform changes (requires manual approval for safety)
      # - name: Terraform plan
      # #   
      #   # run: terraform destroy -auto-approve
      #   run: terraform plan

      - name: Terraform apply
        run: terraform apply -auto-approve   

      # - name: Terraform destroy
      #   run: terraform destroy -auto-approve
